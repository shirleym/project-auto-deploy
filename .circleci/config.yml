

# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environment << parameters.workflow_id >>
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          command: |
            success_migration=$(curl -H "token: 31b97803-fd3d-4659-b2ec-e9c0af61db39" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if ((success_migrations == 1));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            pwd
            npm i
            npm run build
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            pwd
            npm i
            npm run build
  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            mkdir /tmp/test-frontend
            cd frontend
            pwd
            npm i
            npm build
            npm run test
      # Upload test results
      - store_test_results:
          path: /tmp/test-frontend
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            mkdir /tmp/test-backend
            cd backend
            pwd
            npm i
            npm build
            npm run test
      # Upload test results
      - store_test_results:
          path: /tmp/test-backend

  analyze_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            pwd
            npm i
            npm build
            npm audit fix --audit-level=critical --force
  analyze_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            pwd
            npm i
            npm build
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar
      - run: yum install -y gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            ls -la
            ls -la .circleci/files
            aws cloudformation deploy \
              --template-file ".circleci/files/backend.yml" \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            pwd
            ls -la
            echo "[web]" >>  ~/inventory1.txt
            cat ~/inventory1.txt
            aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text >> ~/inventory1.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory1.txt


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["fe:61:cc:11:26:35:2d:e1:44:bf:76:5c:bd:51:b8:74"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh # install the dependencies needed for your playbook
      - run:
          name: Fix host authenticity for inventory
          command: |
            var1=$(cat ~/inventory1.txt | awk 'NR==2')
            echo $var1
            ssh-keyscan $var1 >> ~/.ssh/known_hosts
      - run:
          name: Configure server
          command: |
            cat ~/inventory1.txt
            ansible-playbook -i ~/inventory1.txt ~/project/.circleci/ansible/configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # Checkout code from git
      - run:
          name: Run migrations
          no_output_timeout: 10m
          command: |
            cd backend
            npm install
            npm i
            npm audit fix --audit-level=critical --force
            npm run migrations > migrations.txt
            cat migrations.txt

      - run:
          name: Send migration results to memstash
          command: |
            curl -H "Content-Type: text/plain" -H "token: 31b97803-fd3d-4659-b2ec-e9c0af61db39" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar gzip
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=$API_URL" > frontend/.env
            echo "API_URL=$API_URL"
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            ls -la
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["fe:61:cc:11:26:35:2d:e1:44:bf:76:5c:bd:51:b8:74"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh # install the dependencies needed for your playbook
      - run:
          name: Fix host authenticity for inventory
          command: |
            var1=$(cat ~/inventory1.txt | awk 'NR==2')
            echo $var1
            ssh-keyscan $var1 >> ~/.ssh/known_hosts
      - run:
          name: Deploy backend
          no_output_timeout: 30m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            cat ~/inventory1.txt
            ansible-playbook -i ~/inventory1.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations


  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text)
            api_status=$(curl -s "http://${BACKEND_IP}:3030/api/status" | grep -o "ok")
            if [$(api_status) = "ok"]
            then
              return 1
            else
              return 0
            fi

      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3.website.us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar
            yum -y install gzip
      - run:
          name: Get old stack workflow id
          command: |
              OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo $OldWorkflowID >> ~/OldWorkflowID.txt
      - run:
          name: Update cloudfront distribution
          no_output_timeout: 30m
          command: |
            pwd
            ls -la
            aws cloudformation deploy \
              --template-file ".circleci/files/cloudfront.yml" \
              --stack-name udapeoplecf \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar
            yum -y install gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id and Remove old stacks and files
          command: |
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo $OldWorkflowID
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            if [[ ${CIRCLE_WORKFLOW_ID:0:7} =~ ${OldWorkflowID} ]]
            then
              echo OldWorkflowID: "${OldWorkflowID}"
              echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
              echo "${STACKS[@]}"
              aws s3 rb s3://udapeople-$OldWorkflowID --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
              echo "no destroy"
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations



workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - build_frontend
      - build_backend
      - test_backend:
          requires:
            - build_backend
      - test_frontend:
          requires:
            - build_frontend
      - analyze_frontend:
          requires:
            - test_frontend
      - analyze_backend:
          requires:
            - test_backend
      - deploy-infrastructure:
          requires: [test_frontend, test_backend, analyze_backend, analyze_frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
