# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs

jobs:
  build_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            pwd
            npm i
            npm run build
  build_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            pwd
            npm i
            npm run build
  test_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            mkdir /tmp/test-frontend
            cd frontend
            pwd
            npm i
            npm build
            npm run test
      # Upload test results
      - store_test_results:
          path: /tmp/test-frontend
  test_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            mkdir /tmp/test-backend
            cd backend
            pwd
            npm i
            npm build
            npm run test
      # Upload test results
      - store_test_results:
          path: /tmp/test-backend

  analyze_backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd backend
            pwd
            npm i
            npm build
            npm audit fix --audit-level=critical --force
  analyze_frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          command: |
            cd frontend
            pwd
            npm i
            npm build
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            pwd
            ls -la
            ls -la .circleci/files
            aws cloudformation deploy \
              --template-file ".circleci/files/backend.yml" \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws cloudformation \
              list-exports --query "Exports[?Name==\`backendIP\`].Value" \
              --no-paginate --output text > ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - checkout
      - add_ssh_keys:
          fingerprints: ["fe:61:cc:11:26:35:2d:e1:44:bf:76:5c:bd:51:b8:74"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible && apk add openssh # install the dependencies needed for your playbook

      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt configure-server.yml
            exit 1
      # Here's where you will add some code to rollback on failure



workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - build_frontend
      - build_backend
      - test_backend:
          requires:
            - build_backend
      - test_frontend:
          requires:
            - build_frontend
      - analyze_frontend:
          requires:
            - test_frontend
      - analyze_backend:
          requires:
            - test_backend
      - deploy-infrastructure:
          requires: [test_frontend, test_backend, analyze_backend, analyze_frontend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
